{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/NodeJs/gereja/gereja-fe/src/components/ImportSheet.js\";\nimport React from 'react';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ImportSheet = () => {\n  const readExcel = (file, lingkungan) => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const bufferArray = e.target.result;\n        const workBook = XLSX.read(bufferArray, {\n          type: 'buffer'\n        });\n        const workSheetName = workBook.SheetNames[1];\n        const workSheet = workBook.Sheets[workSheetName];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        resolve(data);\n      };\n    });\n    const url = 'http://localhost:1337/';\n    var currentdate = new Date();\n    var datetime = \"Last Sync: \" + currentdate.getDate() + \"/\" + (currentdate.getMonth() + 1) + \"/\" + currentdate.getFullYear() + \" @ \" + currentdate.getHours() + \":\" + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n    const log_data = {\n      file_name: datetime\n    };\n    promise.then(datas => {\n      axios.post(url + \"import-logs\", log_data).then(import_log_response => {\n        var import_log_id = import_log_response.data.id;\n        datas.forEach(data => {\n          axios.get(url + 'groups?on_sheet_id=' + data['KBG']).then(kbg_resp => {\n            var kbg_id = kbg_resp.data.id;\n            const restructure_data = {\n              on_sheet_no_kk: data['No KK'],\n              nama: data['Nama KK'],\n              nama_panggilan: data['Nama Panggilan'],\n              alamat_1: data['Alamat1'],\n              alamat_2: data['Alamat2'],\n              kode_pos: data['Kode Pos'],\n              telepon: data['Telp Rumah'],\n              group: kbg_id,\n              impor_log: import_log_id\n            };\n            axios.post(url + \"keluargas\", restructure_data).then(keluargas_resp => {\n              console.log(keluargas_resp);\n            });\n          });\n        });\n      });\n      datas.forEach(data => {});\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"flex w-full h-screen items-center justify-center bg-grey-lighter\",\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      class: \"w-64 flex flex-col items-center px-4 py-6 bg-white text-blue rounded-lg shadow-lg tracking-wide uppercase border border-blue cursor-pointer hover:bg-blue hover:text-white\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        class: \"w-8 h-8\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 20 20\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M16.88 9.1A4 4 0 0 1 16 17H5a5 5 0 0 1-1-9.9V7a3 3 0 0 1 4.52-2.59A4.98 4.98 0 0 1 17 8c0 .38-.04.74-.12 1.1zM11 11h3l-4-4-4 4h3v3h2v-3z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"mt-2 text-base leading-normal\",\n        children: \"Select a file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        class: \"hidden\",\n        onChange: e => {\n          const file = e.target.files[0];\n          readExcel(file);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ImportSheet;\nexport default ImportSheet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImportSheet\");","map":{"version":3,"sources":["/opt/lampp/htdocs/NodeJs/gereja/gereja-fe/src/components/ImportSheet.js"],"names":["React","XLSX","axios","ImportSheet","readExcel","file","lingkungan","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","workBook","read","type","workSheetName","SheetNames","workSheet","Sheets","data","utils","sheet_to_json","url","currentdate","Date","datetime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","log_data","file_name","then","datas","post","import_log_response","import_log_id","id","forEach","get","kbg_resp","kbg_id","restructure_data","on_sheet_no_kk","nama","nama_panggilan","alamat_1","alamat_2","kode_pos","telepon","group","impor_log","keluargas_resp","console","log","files"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\n\nconst ImportSheet =  () => {\n\n    const readExcel = (file, lingkungan) => {\n        const promise = new Promise((resolve, reject)=>{\n            const fileReader = new FileReader();\n            fileReader.readAsArrayBuffer(file);\n\n            fileReader.onload = (e)=>{\n                const bufferArray = e.target.result;\n\n                const workBook = XLSX.read(bufferArray, {type:'buffer'});\n                const workSheetName = workBook.SheetNames[1];\n                const workSheet = workBook.Sheets[workSheetName];\n\n                const data = XLSX.utils.sheet_to_json(workSheet);\n                resolve(data);\n            }\n                \n        });\n\n        const url = 'http://localhost:1337/';\n        var currentdate = new Date();\n        var datetime = \"Last Sync: \" + currentdate.getDate() + \"/\"+(currentdate.getMonth()+1) \n        + \"/\" + currentdate.getFullYear() + \" @ \" \n        + currentdate.getHours() + \":\" \n        + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n\n        const log_data = {\n            file_name: datetime\n        }\n        \n        promise.then((datas)=>{\n            axios.post(url+\"import-logs\", log_data).then(import_log_response => {\n                var import_log_id = import_log_response.data.id \n                datas.forEach(data => {\n                    axios.get(url+'groups?on_sheet_id='+data['KBG']).then(kbg_resp => {\n                        var kbg_id = kbg_resp.data.id;\n                        const restructure_data = {\n                            on_sheet_no_kk: data['No KK'],\n                            nama: data['Nama KK'],\n                            nama_panggilan: data['Nama Panggilan'],\n                            alamat_1: data['Alamat1'],\n                            alamat_2: data['Alamat2'],\n                            kode_pos: data['Kode Pos'],\n                            telepon: data['Telp Rumah'],\n                            group: kbg_id,\n                            impor_log: import_log_id\n                        }\n\n                        axios.post(url+\"keluargas\", restructure_data).then(keluargas_resp => {\n                            console.log(keluargas_resp);\n                        })\n                    });\n                });\n            })\n\n            datas.forEach(data => {\n                \n                \n            });\n            \n        })\n        \n    }\n\n    return(\n        <div class=\"flex w-full h-screen items-center justify-center bg-grey-lighter\">\n            <label class=\"w-64 flex flex-col items-center px-4 py-6 bg-white text-blue rounded-lg shadow-lg tracking-wide uppercase border border-blue cursor-pointer hover:bg-blue hover:text-white\">\n                <svg class=\"w-8 h-8\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M16.88 9.1A4 4 0 0 1 16 17H5a5 5 0 0 1-1-9.9V7a3 3 0 0 1 4.52-2.59A4.98 4.98 0 0 1 17 8c0 .38-.04.74-.12 1.1zM11 11h3l-4-4-4 4h3v3h2v-3z\" />\n                </svg>\n                <span class=\"mt-2 text-base leading-normal\">Select a file</span>\n                <input type='file' class=\"hidden\" onChange={(e)=>{\n                    const file = e.target.files[0];\n                    readExcel(file);\n                }} />\n            </label>\n        </div>\n    )\n    \n}\n    \nexport default ImportSheet\n    \n"]},"metadata":{},"sourceType":"module"}